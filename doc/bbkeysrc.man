.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "BBKEYSRC 5"
.TH BBKEYSRC 5 "2017-09-08" "bbkeys 0.9.1" "Standards, Environments and Macros"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
.Vb 1
\& bbkeysrc \- bbkeys configuration file
.Ve
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fI\f(CI$HOME\fI/.bbkeysrc\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fIbbkeys\fR\|(1) picks up its configuration settings from the
\&\fI\f(CI$HOME\fI/.bbkeysrc\fR file unless overridden by command line options.
There are several avenues open to the user to set any key-grabs that the
user wishes:
.IP "\fBUsing\fR \fIbbconf\fR\|(1):" 4
.IX Item "Using bbconf:"
This is a Qt-based application available at <http://bbconf.sourceforge.net/>.
.IP "\fBManually editing\fR \fI\f(CI$HOME\fI/.bbkeysrc\fR:" 4
.IX Item "Manually editing $HOME/.bbkeysrc:"
The format is very easy, and it follows the same format as blackbox's
menu files.  It must begin with a \f(CW\*(C`[begin]\*(C'\fR tag.  It may contain a
\&\f(CW\*(C`[config]\*(C'\fR tag, containing a configuration section, ending with an
\&\f(CW\*(C`[end]\*(C'\fR tag.  In fact, all opening section tags must end with an
\&\f(CW\*(C`[end]\*(C'\fR tag.  It should also contain a \f(CW\*(C`[keybindings]\*(C'\fR section.  For
more information, see blackbox's menu (\fIblackbox\fR\|(1)/MENU).
.SH "FORMAT"
.IX Header "FORMAT"
The \fIbbkeysrc\fR file is formatted into two sections: a configuration
section (see \*(L"\s-1CONFIGURATION\*(R"\s0) and a keybindings section (see
\&\*(L"\s-1KEYBINDINGS\*(R"\s0).
.SS "\s-1CONFIGURATION\s0"
.IX Subsection "CONFIGURATION"
.IP "\fIstylefile\fR: (string)" 4
.IX Item "stylefile: (string)"
The file name of the blackbox style to use.
.ie n .IP "\fIhonorModifiers\fR: (""true"" or ""false"")" 4
.el .IP "\fIhonorModifiers\fR: (\f(CWtrue\fR or \f(CWfalse\fR)" 4
.IX Item "honorModifiers: (true or false)"
Whether or not to break if \f(CW\*(C`NumLock\*(C'\fR or \f(CW\*(C`ScrollLock\*(C'\fR is pressed.  (For
\&\fIbbkeys\fR\|(1) to ignore your keybindings if \f(CW\*(C`NumLock\*(C'\fR or \f(CW\*(C`ScrollLock\*(C'\fR
are pressed, set this to \f(CW\*(C`true\*(C'\fR.)
.ie n .IP "\fIraiseWhileCycling\fR: (""true"" or ""false"")" 4
.el .IP "\fIraiseWhileCycling\fR: (\f(CWtrue\fR or \f(CWfalse\fR)" 4
.IX Item "raiseWhileCycling: (true or false)"
Should \fIbbkeys\fR\|(1) raise the windows through which you are cycling
while cycling through them?
.ie n .IP "\fIfollowWindowOnSend\fR: (""true"" or ""false"")" 4
.el .IP "\fIfollowWindowOnSend\fR: (\f(CWtrue\fR or \f(CWfalse\fR)" 4
.IX Item "followWindowOnSend: (true or false)"
Should \fIbbkeys\fR\|(1) follow the window that you send to another
work space?  This will apply to all send-to operations such that if this
is set to \f(CW\*(C`true\*(C'\fR, \fIbbkeys\fR\|(1) will change work spaces to the work
space to which you sent the window.
.ie n .IP "\fIincludeIconifiedWindowsInCycle\fR: (""true"" or ""false"")" 4
.el .IP "\fIincludeIconifiedWindowsInCycle\fR: (\f(CWtrue\fR or \f(CWfalse\fR)" 4
.IX Item "includeIconifiedWindowsInCycle: (true or false)"
Should \fIbbkeys\fR\|(1) include iconified windows in its window-cycling
list?
.ie n .IP "\fIshowCycleMenu\fR: (""true"" or ""false"")" 4
.el .IP "\fIshowCycleMenu\fR: (\f(CWtrue\fR or \f(CWfalse\fR)" 4
.IX Item "showCycleMenu: (true or false)"
Show the window-cycling menu or cycle without it?
.IP "\fIcycleMenuTitle\fR: (string)" 4
.IX Item "cycleMenuTitle: (string)"
Show the given string as the title of the window-cycling menu.  If an
empty string is passed as the parameter to this configuration option
(\f(CW\*(C`{}\*(C'\fR), then the title will not be drawn.
.ie n .IP "\fImenuTextJustify\fR: (""left"", ""center"", ""right"")" 4
.el .IP "\fImenuTextJustify\fR: (\f(CWleft\fR, \f(CWcenter\fR, \f(CWright\fR)" 4
.IX Item "menuTextJustify: (left, center, right)"
How should the window cycling menu be justified?
.ie n .IP "\fImenuTitleJustify\fR: (""left"", ""center"", ""right"")" 4
.el .IP "\fImenuTitleJustify\fR: (\f(CWleft\fR, \f(CWcenter\fR, \f(CWright\fR)" 4
.IX Item "menuTitleJustify: (left, center, right)"
How should the window-cycling title be justified?
.ie n .IP "\fIautoConfig\fR: (""true"" or ""false"")" 4
.el .IP "\fIautoConfig\fR: (\f(CWtrue\fR or \f(CWfalse\fR)" 4
.IX Item "autoConfig: (true or false)"
Should \fIbbkeys\fR\|(1) watch for changes to its configuration file?  Note:
if you decide to not do this (though it should be \fBvery\fR light on
system resources), you can always force \fIbbkeys\fR\|(1) to reconfigure
itself by sending it a \f(CW\*(C`SIGHUP\*(C'\fR (\f(CW\*(C`killall \-HUP bbkeys\*(C'\fR).
.IP "\fIautoConfigCheckTimeout\fR: (numeric number of seconds)" 4
.IX Item "autoConfigCheckTimeout: (numeric number of seconds)"
How often should \fIbbkeys\fR\|(1) check for changes made to its
configuration file?
.IP "\fIworkspaceColumns\fR: (numeric)" 4
.IX Item "workspaceColumns: (numeric)"
Number of columns that you have your work spaces laid out in your pager.
.IP "\fIworkspaceRows\fR: (numeric)" 4
.IX Item "workspaceRows: (numeric)"
Number of rows in which you have your work spaces or desktops laid out.
As way of an example, if you have your pager laid out in a 4x2 grid (4
wide, 2 high), then you would set \fBworkspaceColumns\fR to 4 and
\&\fBworkspaceRows\fR to 2.
.IP "\fIcycleMenuX\fR: (numeric)" 4
.IX Item "cycleMenuX: (numeric)"
Horizontal position at which you want the window cycling menu to appear.
.IP "\fIcycleMenuY\fR: (numeric)" 4
.IX Item "cycleMenuY: (numeric)"
Vertical position at which you want the window cycling menu to appear.
.Sp
\&\s-1NOTE:\s0 The \fBcycleMenuX\fR and \fBcycleMenuY\fR configuration options allow
you to place your window-cycling window exactly where you want to put it
on the screen.  We at the \fIBbkeys Foundation For Better Software (\s-1TM\s0)\fR
call this a feature, though some crazy nuts might call it a bug caused
by the fact that blackbox's Menu class does not have anything in it to
center it on-screen, etc.  It also does not have any methods available
to figure out how big the menu will be on-screen.  This can be worked
around by bbkeys, but I have not the time to do it now.  Patch anyone?
Or, you can just consider it a really neat feature that you can place
the pop-up window-cycling window anywhere that you want.  =:D
.SS "\s-1KEYBINDINGS\s0"
.IX Subsection "KEYBINDINGS"
The format of this section is similar to the configuration section, and
\&\fIblackbox\fR\|(1)'s menu structure.  Each line will look like this:
.PP
.Vb 1
\&    [command] (keys) {parameters}
.Ve
.PP
\fIParameters:\fR
.IX Subsection "Parameters:"
.PP
Not all directives need to have parameters provided, and within the
\&\f(CW\*(C`[keybindings]\*(C'\fR section, the only sub-group allowed (a group that will
have an \f(CW\*(C`[end]\*(C'\fR tag) is the \f(CW\*(C`[chain]\*(C'\fR tag.  The chain tag is special
and allows the user to give emacs-style keybindings, where a certain
keystroke is given, released, and then another keystroke is given to
complete the action.  A good example would be the following:
.PP
.Vb 6
\&    [chain] (Control\-Mod1\-W)
\&      [sendToWorkspace] (1) {1}
\&      [sendToWorkspace] (2) {2}
\&      [sendToWorkspace] (3) {3}
\&      [sendToWorkspace] (4) {4}
\&    [end]
.Ve
.PP
Note that both the beginning \f(CW\*(C`[chain]\*(C'\fR and the ending \f(CW\*(C`[end]\*(C'\fR tags
must be provided.  In this example, the chain is begun by the user
pressing (and holding) the \f(CW\*(C`Control\*(C'\fR modifier, the \f(CW\*(C`Mod1\*(C'\fR (\f(CW\*(C`Alt\*(C'\fR)
modifier, and the \f(CW\*(C`W\*(C'\fR key on their keyboard.  The user then releases
these keys and \fIbbkeys\fR\|(1) enters the chain.  \fIbbkeys\fR\|(1) will then
wait for the user to press one of the keybindings from within that chain
to execute the next action.  In this case, if \fIbbkeys\fR\|(1) sees either
the \f(CW1\fR, \f(CW2\fR, \f(CW3\fR or \f(CW4\fR key pressed on the keyboard, it will
execute the given action for that key.  Again, in this case, bbkeys will
send the currently-focused window to the work space specified in the
{}\-enclosed parameter (work space 1, 2, 3 or 4 as the case may be).
.PP
So, the parameters provided in a keybinding directive can be seen as
additional information to provide to the \*(L"command\*(R".  In some cases, it
will be a number (what work space to send a window to, how many pixels
to move the window, how many pixels to resize a window, etc.).  In other
cases, it will be a string (\f(CW\*(C`xterm \-fn nexus\*(C'\fR, for example, as an
argument to the \fIExecute\fR command.  And for many directives, it is not
needed at all.
.PP
\fIKeys:\fR
.IX Subsection "Keys:"
.PP
The format for the keybindings are using zero or more modifiers,
separated by the \f(CW\*(C`\-\*(C'\fR character, finally followed by the key name as
known to X.  The \f(CW\*(C`left\*(C'\fR key, for example, is know to X as \f(CW\*(C`Left\*(C'\fR.  The
\&\f(CW\*(C`j\*(C'\fR key is known as \f(CW\*(C`J\*(C'\fR.  You get the idea.  The modifiers are
typically, \f(CW\*(C`Shift\*(C'\fR, \f(CW\*(C`Control\*(C'\fR and \f(CW\*(C`Mod1\*(C'\fR.  An example would be
\&\f(CW\*(C`Mod1\-Control\-K\*(C'\fR.  This would be listed as the second element in a
keybinding directive.
.PP
\fICommands:\fR
.IX Subsection "Commands:"
.PP
The following commands are understood by \fIbbkeys\fR\|(1).  \fIbbkeys\fR\|(1) is
not case-sensitive with regard to its commands, so the case may be mixed
accidentally or on purpose.  =:)
.IP "\fIexecute\fR {string}" 4
.IX Item "execute {string}"
Executes a command.  A string parameter is expected for this directive
that lists the command to be executed.
.IP "\fIiconify\fR" 4
.IX Item "iconify"
Iconify the currently active window.
.IP "\fIraise\fR" 4
.IX Item "raise"
Raise the currently active window.
.IP "\fIlower\fR" 4
.IX Item "lower"
Lower the currently active window.
.IP "\fIclose\fR" 4
.IX Item "close"
Close the currently active window.
.IP "\fItoggleShade\fR" 4
.IX Item "toggleShade"
Toggle shading of the currently active window.
.IP "\fItoggleOmniPresent\fR" 4
.IX Item "toggleOmniPresent"
Toggle omnipresence (sticky on all work spaces) of the currently active
window.
.IP "\fItoggleDecorations\fR" 4
.IX Item "toggleDecorations"
Either strips a window of all decorations or causes it to be decorated
regularly.
.IP "\fImoveWindowUp\fR" 4
.IX Item "moveWindowUp"
A numeric parameter may be provided that tells \fIbbkeys\fR\|(1) how many
pixels in the given direction to move the currently selected window.
.IP "\fImoveWindowDown\fR" 4
.IX Item "moveWindowDown"
A numeric parameter may be provided that tells \fIbbkeys\fR\|(1) how many
pixels in the given direction to move the currently selected window.
.IP "\fImoveWindowLeft\fR" 4
.IX Item "moveWindowLeft"
A numeric parameter may be provided that tells \fIbbkeys\fR\|(1) how many
pixels in the given direction to move the currently selected window.
.IP "\fImoveWindowRight\fR" 4
.IX Item "moveWindowRight"
A numeric parameter may be provided that tells \fIbbkeys\fR\|(1) how many
pixels in the given direction to move the currently selected window.
.IP "\fIresizeWindowWidth\fR" 4
.IX Item "resizeWindowWidth"
A numeric parameter may be provided that tells \fIbbkeys\fR\|(1) how many
pixels in the given direction to resize the currently selected window.
This may be a positive or negative number, allowing \fIbbkeys\fR\|(1) to grow
or shrink the window.
.IP "\fIresizeWindowHeight\fR" 4
.IX Item "resizeWindowHeight"
A numeric parameter may be provided that tells \fIbbkeys\fR\|(1) how many
pixels in the given direction to resize the currently selected window.
This may be a positive or negative number, allowing \fIbbkeys\fR\|(1) to grow
or shrink the window.
.IP "\fItoggleMaximizeFull\fR" 4
.IX Item "toggleMaximizeFull"
Toggle maximization of the currently selected window.
.IP "\fItoggleMaximizeVertical\fR" 4
.IX Item "toggleMaximizeVertical"
Toggle maximization in the vertical direction of the currently selected
window.
.IP "\fItoggleMaximizeHorizontal\fR" 4
.IX Item "toggleMaximizeHorizontal"
Toggle maximization in the horizontal direction of the currently
selected window.
.IP "\fIsendToWorkspace\fR" 4
.IX Item "sendToWorkspace"
A numeric parameter must be provided that tells \fIbbkeys\fR\|(1) to which
work space (starting at \f(CW1\fR) to send the window.
.IP "\fIsendToNextWorkspace\fR" 4
.IX Item "sendToNextWorkspace"
Send the currently selected window to the next work space.
.IP "\fIsendToPrevWorkspace\fR" 4
.IX Item "sendToPrevWorkspace"
Send the currently selected window to the previous work space.
.IP "\fInextWindow\fR" 4
.IX Item "nextWindow"
Select the next window in the window list,
considering windows only on the current work space.
.IP "\fIprevWindow\fR" 4
.IX Item "prevWindow"
Select the previous window in the window list,
considering windows only on the current work space.
.IP "\fInextWindowOnAllWorkspaces\fR" 4
.IX Item "nextWindowOnAllWorkspaces"
Select the next window in the window list considering windows on all
work spaces of the current screen.
.IP "\fIprevWindowOnAllWorkspaces\fR" 4
.IX Item "prevWindowOnAllWorkspaces"
Select the previous window in the window list considering windows on all
work spaces of the current screen.
.IP "\fInextWindowOnAllScreens\fR" 4
.IX Item "nextWindowOnAllScreens"
Select the next window in the window list considering windows on all
screens.
.IP "\fIprevWindowOnAllScreens\fR" 4
.IX Item "prevWindowOnAllScreens"
Select the previous window in the window list considering windows on all
screens.
.IP "\fInextWindowOfClass\fR" 4
.IX Item "nextWindowOfClass"
Select the next window in the window list of the same resource class as
the currently selected window, considering windows only on the current
work space.
.IP "\fIprevWindowOfClass\fR" 4
.IX Item "prevWindowOfClass"
Select the previous window in the window list of the same resource class as
the currently selected window, considering windows only on the current
work space.
.IP "\fInextWindowOfClassOnAllWorkspaces\fR" 4
.IX Item "nextWindowOfClassOnAllWorkspaces"
Select the next window in the window list of the same resource class as
the currently selected window, considering windows on all work spaces.
.IP "\fIprevWindowOfClassOnAllWorkspaces\fR" 4
.IX Item "prevWindowOfClassOnAllWorkspaces"
Select the previous window in the window list of the same resource class as
the currently selected window, considering windows on all workspaces.
.IP "\fIchangeWorkspace\fR" 4
.IX Item "changeWorkspace"
A numeric parameter must be given to tell \fIbbkeys\fR\|(1) to which work
space to switch.
.IP "\fInextWorkspace\fR" 4
.IX Item "nextWorkspace"
Move to the next work space.
.IP "\fIprevWorkspace\fR" 4
.IX Item "prevWorkspace"
Move to the previous work space.
.IP "\fIupWorkspace\fR" 4
.IX Item "upWorkspace"
Move one work space upward in the desktop layout.
.IP "\fIdownWorkspace\fR" 4
.IX Item "downWorkspace"
Move one work space down in the desktop layout.
.IP "\fIleftWorkspace\fR" 4
.IX Item "leftWorkspace"
Move one work space left in the desktop layout.
.IP "\fIrightWorkspace\fR" 4
.IX Item "rightWorkspace"
Move one work space right in the desktop layout.
.IP "\fInextScreen\fR" 4
.IX Item "nextScreen"
Move to the next screen.
.IP "\fIprevScreen\fR" 4
.IX Item "prevScreen"
Move to the previous screen.
.IP "\fIchain\fR" 4
.IX Item "chain"
No parameter is needed for this directive.
.SH "EXAMPLE"
.IX Header "EXAMPLE"
An example configuration file appears below:
.PP
.Vb 10
\& [begin] (bbkeys configuration file)
\&   [config]
\&     [option] (stylefile) {/usr/share/blackbox/styles/Cthulhain}
\&     [option] (honorModifiers) {false}
\&     [option] (raiseWhileCycling) {false}
\&     [option] (showCycleMenu) {true}
\&     [option] (menuTextJustify) {right}
\&     [option] (autoCOnfig) {true}
\&     [option] (autoConfigCheckTimeout) {2}
\&     [option] (workspaceColumns) {4}
\&     [option] (workspaceRows) {2}
\&     [option] (cycleMenuX) {20}
\&     [option] (cycleMenuY) {20}
\&   [end]
\&
\&   [keybindings] (begin keybindings)
\&     [chain] (Control\-Mod1\-W)
\&       [sendToWorkspace] (1) {1}
\&       [sendToWorkspace] (2) {2}
\&       [sendToWorkspace] (3) {3}
\&       [sendToWorkspace] (4) {4}
\&       [sendToWorkspace] (5) {5}
\&       [sendToWorkspace] (6) {6}
\&       [sendToWorkspace] (7) {7}
\&       [sendToWorkspace] (8) {8}
\&     [end]
\&     [chain] (Mod1\-Y)
\&       [execute] (1) {xmms}
\&       [execute] (2) {aumix \-v +5}
\&       [execute] (3) {aumix \-v \-5}
\&     [end]
\&     [Lower] (Mod1\-Down)
\&     [Raise] (Mod1\-Up)
\&     [toggleShade] (Mod1\-F9)
\&     [Close] (Mod1\-F4)
\&     [Iconify] (Mod1\-m)
\&     [toggleMaximizeFull] (Mod1\-F12)
\&     [toggleMaximizeHorizontal] (Mod1\-F11)
\&     [toggleMaximizeVertical] (Mod1\-F10)
\&     [toggleOmnipresent] (Mod1\-Control\-Up)
\&     [resizeWindowWidth] (Mod1\-Control\-Shift\-Left) {\-5}
\&     [resizeWindowWidth] (Mod1\-Control\-Shift\-Right) {5}
\&     [resizeWindowHeight] (Mod1\-Control\-Shift\-Up) {\-5}
\&     [resizeWindowHeight] (Mod1\-Control\-Shift\-Down) {5}
\&     [moveWindowUp] (Mod1\-Control\-Up) {1}
\&     [moveWindowDown] (Mod1\-Control\-Down) {1}
\&     [moveWindowLeft] (Mod1\-Control\-Left) {1}
\&     [moveWindowRight] (Mod1\-Control\-Right) {1}
\&     [NextWindow] (Mod1\-Tab)
\&     [NextWindowOnAllWorkspaces] (Mod1\-Control\-Tab)
\&     [PrevWindow] (Mod1\-Shift\-Tab)
\&     [changeWorkspace] (Mod1\-1) {1}
\&     [changeWorkspace] (Mod1\-2) {2}
\&     [changeWorkspace] (Mod1\-3) {3}
\&     [changeWorkspace] (Mod1\-4) {4}
\&     [changeWorkspace] (Mod1\-5) {5}
\&     [changeWorkspace] (Mod1\-6) {6}
\&     [changeWorkspace] (Mod1\-7) {7}
\&     [changeWorkspace] (Mod1\-8) {8}
\&
\&     [upWorkspace] (Mod1\-Control\-K)
\&     [downWorkspace] (Mod1\-Control\-J)
\&     [leftWorkspace] (Mod1\-Control\-H)
\&     [rightWorkspace] (Mod1\-Control\-L)
\&
\&     [showRootMenu] (Mod1\-Control\-Escape)
\&
\&     [Execute] (Mod1\-F5) {xrefresh}
\&     [Execute] (Mod1\-F1) {gnome\-terminal}
\&     #[Execute] (Mod4\-E) {kfmclient openProfile filemanagement}
\&     #[Execute] (F20) {kfmclient openProfile filemanagement}
\&     [Execute] (Mod4\-E) {nautilus /home/gideon}
\&     [Execute] (F20) {nautilus /home/gideon}
\&  [end] (end keybindings)
\&  [end] (end bbkeys configuration)
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIbbkeys\fR\|(1),
\&\fIblackbox\fR\|(1),
\&\fIbbconf\fR\|(1),
\&\fIbbkeysconf\fR\|(1).
.SH "AUTHOR"
.IX Header "AUTHOR"
Brian Bidulock <mailto:bidulock@openss7.org>.
.PP
See \fB\-\-copying\fR for full copyright notice and copying permissions.
.SH "LICENSE"
.IX Header "LICENSE"
\&\fBbbkeys\fR is licensed under the \s-1MIT\s0 License.
See the \fI\s-1COPYING\s0\fR file in the distribution or use the \fB\-\-copying\fR flag
to display copying permissions.
